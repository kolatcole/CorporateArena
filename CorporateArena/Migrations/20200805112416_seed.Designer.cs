// <auto-generated />
using System;
using CorporateArena.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CorporateArena.Presentation.Core.Migrations
{
    [DbContext(typeof(TContext))]
    [Migration("20200805112416_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CorporateArena.Domain.Article", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleLikesCount")
                        .HasColumnType("int");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("CorporateArena.Domain.ArticleComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("CommentLikesCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.ToTable("ArticleComments");
                });

            modelBuilder.Entity("CorporateArena.Domain.ArticleLike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.ToTable("ArticleLikes");
                });

            modelBuilder.Entity("CorporateArena.Domain.BrainTeaser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Riddle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("BrainTeasers");
                });

            modelBuilder.Entity("CorporateArena.Domain.BrainTeaserAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrainTeaserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BrainTeaserID");

                    b.ToTable("BrainTeaserAnswers");
                });

            modelBuilder.Entity("CorporateArena.Domain.CommentLike", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleCommentID")
                        .HasColumnType("int");

                    b.Property<int>("ArticleID")
                        .HasColumnType("int");

                    b.Property<int>("CommentID")
                        .HasColumnType("int");

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ArticleCommentID");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("CorporateArena.Domain.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CorporateArena.Domain.Privilege", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Privileges");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Action = "Create",
                            DisplayName = "Create User",
                            Entity = "User",
                            Name = "CreateUser"
                        },
                        new
                        {
                            ID = 2,
                            Action = "Read",
                            DisplayName = "Read User",
                            Entity = "User",
                            Name = "ReadUser"
                        },
                        new
                        {
                            ID = 3,
                            Action = "Update",
                            DisplayName = "Update User",
                            Entity = "User",
                            Name = "UpdateUser"
                        },
                        new
                        {
                            ID = 4,
                            Action = "Delete",
                            DisplayName = "Delete User",
                            Entity = "User",
                            Name = "DeleteUser"
                        },
                        new
                        {
                            ID = 5,
                            Action = "Create",
                            DisplayName = "Create UserRole",
                            Entity = "UserRole",
                            Name = "CreateUserRole"
                        },
                        new
                        {
                            ID = 6,
                            Action = "Create",
                            DisplayName = "Create Role",
                            Entity = "Role",
                            Name = "CreateRole"
                        },
                        new
                        {
                            ID = 7,
                            Action = "Read",
                            DisplayName = "Read Role",
                            Entity = "Role",
                            Name = "ReadRole"
                        },
                        new
                        {
                            ID = 8,
                            Action = "Update",
                            DisplayName = "Update Role",
                            Entity = "Role",
                            Name = "UpdateRole"
                        },
                        new
                        {
                            ID = 9,
                            Action = "Delete",
                            DisplayName = "Delete Role",
                            Entity = "Role",
                            Name = "DeleteRole"
                        },
                        new
                        {
                            ID = 10,
                            Action = "Create",
                            DisplayName = "Create RolePrivilege",
                            Entity = "RolePrivilege",
                            Name = "CreateRolePrivilege"
                        },
                        new
                        {
                            ID = 11,
                            Action = "Create",
                            DisplayName = "Create BrainTeaser",
                            Entity = "BrainTeaser",
                            Name = "CreateBrainTeaser"
                        },
                        new
                        {
                            ID = 12,
                            Action = "Read",
                            DisplayName = "Read BrainTeaser",
                            Entity = "BrainTeaser",
                            Name = "ReadBrainTeaser"
                        },
                        new
                        {
                            ID = 13,
                            Action = "Update",
                            DisplayName = "Update BrainTeaser",
                            Entity = "BrainTeaser",
                            Name = "UpdateBrainTeaser"
                        },
                        new
                        {
                            ID = 14,
                            Action = "Delete",
                            DisplayName = "Delete BrainTeaser",
                            Entity = "BrainTeaser",
                            Name = "DeleteBrainTeaser"
                        },
                        new
                        {
                            ID = 15,
                            Action = "Create",
                            DisplayName = "Create Vacancy",
                            Entity = "Vacancy",
                            Name = "CreateVacancy"
                        },
                        new
                        {
                            ID = 16,
                            Action = "Read",
                            DisplayName = "Read Vacancy",
                            Entity = "Vacancy",
                            Name = "ReadVacancy"
                        },
                        new
                        {
                            ID = 17,
                            Action = "Update",
                            DisplayName = "Update Vacancy",
                            Entity = "Vacancy",
                            Name = "UpdateVacancy"
                        },
                        new
                        {
                            ID = 18,
                            Action = "Delete",
                            DisplayName = "Delete Vacancy",
                            Entity = "Vacancy",
                            Name = "DeleteVacancy"
                        },
                        new
                        {
                            ID = 19,
                            Action = "Create",
                            DisplayName = "Create Article",
                            Entity = "Article",
                            Name = "CreateArticle"
                        },
                        new
                        {
                            ID = 20,
                            Action = "Read",
                            DisplayName = "Read Article",
                            Entity = "Article",
                            Name = "ReadArticle"
                        },
                        new
                        {
                            ID = 21,
                            Action = "Update",
                            DisplayName = "Update Article",
                            Entity = "Article",
                            Name = "UpdateArticle"
                        },
                        new
                        {
                            ID = 22,
                            Action = "Delete",
                            DisplayName = "Delete Article",
                            Entity = "Article",
                            Name = "DeleteArticle"
                        },
                        new
                        {
                            ID = 23,
                            Action = "Comment",
                            DisplayName = "Comment on Article",
                            Entity = "Article",
                            Name = "CommentArticle"
                        },
                        new
                        {
                            ID = 24,
                            Action = "Like",
                            DisplayName = "Like Article",
                            Entity = "Article",
                            Name = "LikeArticle"
                        },
                        new
                        {
                            ID = 25,
                            Action = "Create",
                            DisplayName = "Create ArticleComment",
                            Entity = "ArticleComment",
                            Name = "CreateArticleComment"
                        },
                        new
                        {
                            ID = 26,
                            Action = "Like",
                            DisplayName = "Like ArticleComment",
                            Entity = "ArticleComment",
                            Name = "LikeArticleComment"
                        },
                        new
                        {
                            ID = 27,
                            Action = "Create",
                            DisplayName = "Create TrafficUpdate",
                            Entity = "TrafficUpdate",
                            Name = "CreateTrafficUpdate "
                        },
                        new
                        {
                            ID = 28,
                            Action = "Read",
                            DisplayName = "Read TrafficUpdate",
                            Entity = "TrafficUpdate",
                            Name = "ReadTrafficUpdate"
                        },
                        new
                        {
                            ID = 29,
                            Action = "Update",
                            DisplayName = "Update TrafficUpdate",
                            Entity = "TrafficUpdate",
                            Name = "UpdateTrafficUpdate"
                        },
                        new
                        {
                            ID = 30,
                            Action = "Delete",
                            DisplayName = "Delete TrafficUpdate",
                            Entity = "TrafficUpdate",
                            Name = "DeleteTrafficUpdate"
                        });
                });

            modelBuilder.Entity("CorporateArena.Domain.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2020, 8, 5, 12, 24, 15, 656, DateTimeKind.Local).AddTicks(672),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "SuperUser",
                            Name = "SuperUser",
                            UserCreated = 1
                        },
                        new
                        {
                            ID = 2,
                            DateCreated = new DateTime(2020, 8, 5, 12, 24, 15, 658, DateTimeKind.Local).AddTicks(2717),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Basic",
                            Name = "Basic",
                            UserCreated = 1
                        });
                });

            modelBuilder.Entity("CorporateArena.Domain.RolePrivilege", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrivilegeID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("RolePrivileges");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            PrivilegeID = 2,
                            RoleID = 2
                        },
                        new
                        {
                            ID = 2,
                            PrivilegeID = 7,
                            RoleID = 2
                        },
                        new
                        {
                            ID = 3,
                            PrivilegeID = 12,
                            RoleID = 2
                        },
                        new
                        {
                            ID = 4,
                            PrivilegeID = 16,
                            RoleID = 2
                        },
                        new
                        {
                            ID = 5,
                            PrivilegeID = 20,
                            RoleID = 2
                        },
                        new
                        {
                            ID = 6,
                            PrivilegeID = 28,
                            RoleID = 2
                        },
                        new
                        {
                            ID = 7,
                            PrivilegeID = 1,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 8,
                            PrivilegeID = 2,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 9,
                            PrivilegeID = 3,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 10,
                            PrivilegeID = 4,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 11,
                            PrivilegeID = 5,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 12,
                            PrivilegeID = 6,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 13,
                            PrivilegeID = 7,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 14,
                            PrivilegeID = 8,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 15,
                            PrivilegeID = 9,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 16,
                            PrivilegeID = 10,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 17,
                            PrivilegeID = 11,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 18,
                            PrivilegeID = 12,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 19,
                            PrivilegeID = 13,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 20,
                            PrivilegeID = 14,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 21,
                            PrivilegeID = 15,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 22,
                            PrivilegeID = 16,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 23,
                            PrivilegeID = 17,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 24,
                            PrivilegeID = 18,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 25,
                            PrivilegeID = 19,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 26,
                            PrivilegeID = 20,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 27,
                            PrivilegeID = 21,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 28,
                            PrivilegeID = 22,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 29,
                            PrivilegeID = 23,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 30,
                            PrivilegeID = 24,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 31,
                            PrivilegeID = 25,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 32,
                            PrivilegeID = 26,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 33,
                            PrivilegeID = 27,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 34,
                            PrivilegeID = 28,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 35,
                            PrivilegeID = 29,
                            RoleID = 1
                        },
                        new
                        {
                            ID = 36,
                            PrivilegeID = 30,
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("CorporateArena.Domain.TrafficComment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrafficUpdateID")
                        .HasColumnType("int");

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TrafficUpdateID");

                    b.ToTable("TrafficComments");
                });

            modelBuilder.Entity("CorporateArena.Domain.TrafficUpdate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("TrafficUpdates");
                });

            modelBuilder.Entity("CorporateArena.Domain.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2020, 8, 5, 12, 24, 15, 659, DateTimeKind.Local).AddTicks(315),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tkolawole@Inspirecoders.com",
                            FirstName = "System",
                            IsActive = true,
                            LastName = "User",
                            Password = "test",
                            RoleID = 1,
                            UserName = "System Administrator"
                        });
                });

            modelBuilder.Entity("CorporateArena.Domain.UserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int?>("UserCreated")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("UserModified")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DateCreated = new DateTime(2020, 8, 5, 12, 24, 15, 659, DateTimeKind.Local).AddTicks(7119),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("CorporateArena.Domain.Vacancy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserCreated")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("CorporateArena.Domain.ArticleComment", b =>
                {
                    b.HasOne("CorporateArena.Domain.Article", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporateArena.Domain.ArticleLike", b =>
                {
                    b.HasOne("CorporateArena.Domain.Article", null)
                        .WithMany("ArticleLikes")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporateArena.Domain.BrainTeaserAnswer", b =>
                {
                    b.HasOne("CorporateArena.Domain.BrainTeaser", null)
                        .WithMany("BrainTeaserAnswers")
                        .HasForeignKey("BrainTeaserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporateArena.Domain.CommentLike", b =>
                {
                    b.HasOne("CorporateArena.Domain.ArticleComment", null)
                        .WithMany("CommentLikes")
                        .HasForeignKey("ArticleCommentID");
                });

            modelBuilder.Entity("CorporateArena.Domain.Privilege", b =>
                {
                    b.HasOne("CorporateArena.Domain.Role", null)
                        .WithMany("Privileges")
                        .HasForeignKey("RoleID");
                });

            modelBuilder.Entity("CorporateArena.Domain.TrafficComment", b =>
                {
                    b.HasOne("CorporateArena.Domain.TrafficUpdate", null)
                        .WithMany("TrafficUpdateComments")
                        .HasForeignKey("TrafficUpdateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CorporateArena.Domain.User", b =>
                {
                    b.HasOne("CorporateArena.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
